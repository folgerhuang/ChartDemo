using System;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using DevExpress.XtraBars;
using DevExpress.XtraBars.Ribbon;
using DevExpress.XtraBars.Helpers;
using DevExpress.Skins;
using DevExpress.LookAndFeel;
using DevExpress.UserSkins;
using DevExpress.XtraTreeList;
using Microsoft.Win32;


namespace TreeDemo
{
    public partial class Form1 : RibbonForm
    {
        private enum Weather { 晴天 = 0, 降温 = 1, 寒潮 = 2 };
        public Form1()
        {
            InitializeComponent();
            InitSkinGallery();
            InitTreeListControl();

            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataSource1.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataSource2.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataSource3.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            sqlDataSource4.Fill();
        }

        /// <summary>
        /// 初始化ColumnEdit的imageComboBox控件与枚举类型
        /// weatherd的关系
        /// </summary>
        private void InitColumnEdit()
        {
            repositoryItemImageComboBox2.Items.AddEnum(typeof(Weather));
            repositoryItemImageComboBox2.Items[0].ImageIndex = 0;
            repositoryItemImageComboBox2.Items[1].ImageIndex = 1;
            repositoryItemImageComboBox2.Items[2].ImageIndex = 2;

        }

        private void InitTreeCheckedTree()
        {
            /*
            ArrayList pList = new ArrayList();

            TestTreeList p = new TestTreeList();

            p.Name = "测试1";

            p.IsChecked = true;

            p.ID = 1;

            pList.Add(p);

            TestTreeList q = new TestTreeList();

            q.Name = "测试2";

            q.IsChecked = false;

            q.ParentID = 1;

            q.ID = 2;

            pList.Add(q);

            this.treeList1.DataSource = pList;

            this.treeList1.RefreshDataSource();
            */

        }
        void InitSkinGallery()
        {
            SkinHelper.InitSkinGallery(rgbiSkins, true);
        }
        void InitTreeListControl()
        {
            Projects projects = InitData();
            DataBinding(projects);
        }
        Projects InitData()
        {
           
            Projects projects = new Projects();
            projects.Add(new Project("Project A", false));
            projects.Add(new Project("Project B", false));
            projects[0].Projects.Add(new Project("Task 1", true));
            projects[0].Projects.Add(new Project("Task 2", true));
            projects[0].Projects.Add(new Project("Task 3", true));
            projects[0].Projects.Add(new Project("Task 4", true));
            projects[1].Projects.Add(new Project("Task 1", true));
            projects[1].Projects.Add(new Project("Task 2", true));
            projects[0].Projects[0].Projects.Add(new Project("test1", true));
            return projects;
        }
        void DataBinding(Projects projects)
        {
            treeList.ExpandAll();
            treeList.DataSource = projects;
            treeList.BestFitColumns();
        }

        private void iExit_ItemClick(object sender, ItemClickEventArgs e)
        {
            this.Close();
        }

        private void iOpen_ItemClick(object sender, ItemClickEventArgs e)
        {
            OpenFileDialog opd = new OpenFileDialog();
            opd.ShowDialog();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            InitColumnEdit();
            this.treeList2.AppendNode(new object[] {"1", "2010.1.22", Weather.降温 }, null);
            this.treeList2.AppendNode(new object[] {"2" ,"2010.1.23", Weather.晴天 }, null);
            this.treeList2.AppendNode(new object[] {"3", "2010.1.24", Weather.寒潮 }, null);
            
            InitTreeCheckedTree();
            initDSN();
        }

        private void treeList_MouseDown(object sender, MouseEventArgs e)
        {
            /*
            if (e.Button == MouseButtons.Right)
            {
                treeList.ContextMenuStrip = null;
                DevExpress.XtraTreeList.TreeListHitInfo hinfo = treeList.CalcHitInfo(new Point(e.X, e.Y));
                DevExpress.XtraTreeList.Nodes.TreeListNode node = hinfo.Node;
                treeList.FocusedNode = node;
                if (node != null)
                {
                    treeList.ContextMenuStrip = ContextMenuStrip;
                }


            }*/

        }

        private void iAbout_ItemClick(object sender, ItemClickEventArgs e)
        {
            MessageBox.Show("help information!");
        }

        private void treeList_MouseUp(object sender, MouseEventArgs e)
        {
            TreeList tree = sender as TreeList;
            if (e.Button == MouseButtons.Right
             && ModifierKeys == Keys.None
                        && treeList.State == TreeListState.Regular)
            {
                Point p = new Point(Cursor.Position.X, Cursor.Position.Y);
                TreeListHitInfo hitInfo = tree.CalcHitInfo(e.Location);
                if (hitInfo.HitInfoType == HitInfoType.Cell)
                {
                    tree.SetFocusedNode(hitInfo.Node);
                }

                if (tree.FocusedNode != null & tree.FocusedNode.Level == 0)
                {
                    popupMenu1.ShowPopup(p);
                }
                else
                    popupMenu2.ShowPopup(p);
            }

        }

        private void barButtonItem1_ItemClick(object sender, ItemClickEventArgs e)
        {
            MessageBox.Show("新建公司");
        }

        private void barButtonItem3_ItemClick(object sender, ItemClickEventArgs e)
        {
            Form frm2 = new Form2();
            frm2.TopLevel = false;
            frm2.Parent = this.splitContainerControl1.Panel1;
            frm2.Dock = System.Windows.Forms.DockStyle.Fill;
            frm2.SetBounds(0, 0, this.splitContainerControl.Panel2.Width, this.splitContainerControl.Panel2.Height);
            frm2.Show();
        }

        private void treeList_AfterFocusNode(object sender, NodeEventArgs e)
        {
            int temId = e.Node.Level ;
        }

        private void initDSN()
        {
            RegistryKey regRootKey;
            RegistryKey regSubKey;
            ///定义Root指向注册表HKEY_LOCAL_MACHINE节点，
            ///如果是需要获取用户DSN则需要使用 Registry.CurrentUser;
            regRootKey = Registry.LocalMachine;
            ///定义注册表子Path
            string strRegPath = @"SOFTWARE\Wow6432Node\ODBC\ODBC.INI\ODBC Data Sources";
            regSubKey = regRootKey.OpenSubKey(strRegPath);
            string[] strDSNList = regSubKey.GetValueNames();
            ///关闭
            regSubKey.Close();
            regRootKey.Close();
            if (strDSNList.Count() != 0)
            {
                for (int i = 0; i < strDSNList.Count(); i++)
                {
                    //DDL_AvailableDSN.Items.Add(strDSNList[i]);
                    this.comboBoxEdit1.Properties.Items.Add(strDSNList[i]);
                }
            }
        }

        

    }
}